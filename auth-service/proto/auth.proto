syntax = "proto3";
package fcat.auth.v1;
option go_package = "./pb";

import "dto.proto";

import "google/api/annotations.proto";
// import "google/api/httpbody.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    security_definitions: {
        security: {
                key: "Bearer"
                value: {
                type: TYPE_API_KEY
                in: IN_HEADER
                name: "Authorization"
                description: "Authentication token, prefixed by Bearer: Bearer <token>"
            }
        }
    }
    security: {
        security_requirement: {
            key: "Bearer"
        }
    }
};

service Auth {
    rpc PublicKey(Empty) returns (PubkeyResponse) {
        option (google.api.http) = {
            post: "/v1/token-public-key"
            body:"*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: { } // Disable security key
            summary: "Get public key for key to validating "
            description: "This API provide login using username and password"
        };
    }

    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/login"
            body:"*"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            security: { } // Disable security key
            summary: "Login with Basic Authentication"
            description: "This API provide login using username and password"
        };
    }
};
